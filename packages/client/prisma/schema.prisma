// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id              String          @id @default(uuid())
  userId          String          @unique
  username        String          @unique
  image           String?
  location        String?
  bio             String?
  website         String?
  projects        Project[]
  likes           Like[]
  comments        Comment[]
  following       Relationship[]  @relation(name: "following")
  followers       Relationship[]  @relation(name: "followers")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}

model Relationship {
  id            String      @id @default(uuid())
  profileId     String
  profile       Profile     @relation(name: "following", fields: [profileId], references: [id], onDelete: Cascade)
  targetUserId  String
  targetUser    Profile     @relation(name: "followers", fields: [targetUserId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt @default(now())
  @@unique([profileId, targetUserId])
}

enum LayerType {
  FRAGMENT
  CIRCUIT
}

enum BlendingMode {
  NONE
  NORMAL
  ADDITIVE
  SUBTRACTIVE
  MULTIPLY
}

model Layer {
  id            String        @id @default(uuid())
  name          String
  enabled       Boolean       @default(true)
  blendingMode  BlendingMode  @default(NORMAL)
  type          LayerType
  circuit       Json?
  fragment      String?
  projectId     String
  project       Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt @default(now())
}

enum UniformType {
  TEXTURE
}

model Uniform {
  id            String        @id @default(uuid())
  name          String
  type          UniformType
  value         String
  projectId     String
  project       Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt @default(now())
}

model Project {
  id          String      @id @default(uuid())
  name        String
  image       String
  layers      Layer[]
  private     Boolean     @default(false)
  ownerId     String    
  owner       Profile     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  uniforms    Uniform[]
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt @default(now())
}

model Like {
  id          String    @id @default(uuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
  @@unique([projectId, profileId])
}

model Comment {
  id          String    @id @default(uuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  text        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
}