generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id              String          @id @default(uuid())
  userId          String          @unique
  username        String          @unique
  image           String?
  location        String?
  bio             String?
  website         String?
  projects        Project[]
  likes           Like[]
  comments        Comment[]
  following       Relationship[]  @relation("following")
  followers       Relationship[]  @relation("followers")
  subscription    Subscription?   @relation("subscription")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}

model Relationship {
  id                String      @id @default(uuid())
  profileId         String
  profile           Profile     @relation("following", fields: [profileId], references: [id], onDelete: Cascade)
  targetProfileId   String
  targetProfile     Profile     @relation("followers", fields: [targetProfileId], references: [id], onDelete: Cascade)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt @default(now())

  @@unique([profileId, targetProfileId])
}

model Subscription {
  id                    String            @id @default(uuid())
  profileId             String            @unique
  profile               Profile           @relation("subscription", fields: [profileId], references: [id], onDelete: Cascade)
  stripeCustomerId      String            @unique
  stripeSubscriptionId  String            @unique
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt @default(now())

  @@unique([stripeCustomerId, stripeSubscriptionId])
}

enum LayerType {
  FRAGMENT
  CIRCUIT
}

enum BlendingMode {
  NONE
  NORMAL
  ADD
  SCREEN
  MULTIPLY
  OVERLAY
}

model Layer {
  id            String        @id @default(uuid())
  name          String
  enabled       Boolean       @default(true)
  blendingMode  BlendingMode  @default(NORMAL)
  type          LayerType
  circuit       Json?
  fragment      String?
  projectId     String
  project       Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt @default(now())
}

enum UniformType {
  TEXTURE
}

model Uniform {
  id            String        @id @default(uuid())
  name          String
  type          UniformType
  value         String
  projectId     String
  project       Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt @default(now())
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

model Project {
  id            String              @id @default(uuid())
  name          String
  description   String?
  layers        Layer[]
  layerOrder    String[]            @default([])
  ownerId       String    
  owner         Profile             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  uniforms      Uniform[]
  likes         Like[]
  comments      Comment[]
  visibility    ProjectVisibility   @default(PUBLIC)
  originId      String?
  origin        Project?            @relation("origin", fields: [originId], references: [id], onDelete: SetDefault)
  forks         Project[]           @relation("origin")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt @default(now())
}

model Like {
  id          String    @id @default(uuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())

  @@unique([projectId, profileId])
}

model Comment {
  id          String    @id @default(uuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  text        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
}